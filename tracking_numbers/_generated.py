# DO NOT EDIT - Generated by codegen.py
import re

from tracking_numbers.checksum_validator import Mod10
from tracking_numbers.checksum_validator import Mod7
from tracking_numbers.checksum_validator import NoChecksum
from tracking_numbers.checksum_validator import S10
from tracking_numbers.checksum_validator import SumProductWithWeightsAndModulo
from tracking_numbers.definition import TrackingNumberDefinition
from tracking_numbers.serial_number import DefaultSerialNumberParser
from tracking_numbers.serial_number import PrependIf
from tracking_numbers.serial_number import UPSSerialNumberParser
from tracking_numbers.types import Courier
from tracking_numbers.types import Product


DEFINITIONS = [
    TrackingNumberDefinition(
        courier=Courier(code="dhl", name="DHL"),
        product=Product(name="DHL Express"),
        number_regex=re.compile(
            "\\s*(?P<SerialNumber>([0-9]\\s*){9})(?P<CheckDigit>([0-9]\\s*))",
        ),
        tracking_url_template="http://www.dhl.com/en/express/tracking.html?brand=DHL&AWB=%s",
        serial_number_parser=DefaultSerialNumberParser(prepend_if=None),
        checksum_validator=Mod7(),
    ),
    TrackingNumberDefinition(
        courier=Courier(code="dhl", name="DHL"),
        product=Product(name="DHL Express Air"),
        number_regex=re.compile(
            "\\s*(?P<SerialNumber>([0-9]\\s*){10})(?P<CheckDigit>[0-9]\\s*)",
        ),
        tracking_url_template="http://www.dhl.com/en/express/tracking.html?brand=DHL&AWB=%s",
        serial_number_parser=DefaultSerialNumberParser(prepend_if=None),
        checksum_validator=Mod7(),
    ),
    TrackingNumberDefinition(
        courier=Courier(code="amazon", name="Amazon"),
        product=Product(name="Amazon Logistics"),
        number_regex=re.compile(
            "\\s*T\\s*B\\s*A\\s*(?P<SerialNumber>([0-9]\\s*){12,12})\\s*",
        ),
        tracking_url_template=None,
        serial_number_parser=DefaultSerialNumberParser(prepend_if=None),
        checksum_validator=NoChecksum(),
    ),
    TrackingNumberDefinition(
        courier=Courier(code="usps", name="United States Postal Service"),
        product=Product(name="USPS 20"),
        number_regex=re.compile(
            "\\s*(?P<SerialNumber>(?P<ServiceType>([0-9]\\s*){2})(?P<ShipperId>([0-9]\\s*){9})(?P<PackageId>([0-9]\\s*){8}))(?P<CheckDigit>[0-9]\\s*)",
        ),
        tracking_url_template="https://tools.usps.com/go/TrackConfirmAction?tLabels=%s",
        serial_number_parser=DefaultSerialNumberParser(prepend_if=None),
        checksum_validator=Mod10(odds_multiplier=1, evens_multiplier=3),
    ),
    TrackingNumberDefinition(
        courier=Courier(code="usps", name="United States Postal Service"),
        product=Product(name="USPS 34v2"),
        number_regex=re.compile(
            "\\s*(?P<RoutingApplicationId>4\\s*2\\s*0\\s*)(?P<DestinationZip>([0-9]\\s*){5})(?P<RoutingNumber>([0-9]\\s*){4})(?P<SerialNumber>(?P<ApplicationIdentifier>9\\s*[2345]\\s*)?(?P<ShipperId>([0-9]\\s*){8})(?P<PackageId>([0-9]\\s*){11}))(?P<CheckDigit>[0-9]\\s*)",
        ),
        tracking_url_template="https://tools.usps.com/go/TrackConfirmAction?tLabels=%s",
        serial_number_parser=DefaultSerialNumberParser(prepend_if=None),
        checksum_validator=Mod10(odds_multiplier=1, evens_multiplier=3),
    ),
    TrackingNumberDefinition(
        courier=Courier(code="usps", name="United States Postal Service"),
        product=Product(name="USPS 91"),
        number_regex=re.compile(
            "\\s*(?:(?P<RoutingApplicationId>4\\s*2\\s*0\\s*)(?P<DestinationZip>([0-9]\\s*){5}))?(?P<SerialNumber>(?P<ApplicationIdentifier>9\\s*[12345]\\s*)?(?P<SCNC>([0-9]\\s*){2})(?P<ServiceType>([0-9]\\s*){2})(?P<ShipperId>([0-9]\\s*){8})(?P<PackageId>([0-9]\\s*){11}|([0-9]\\s*){7}))(?P<CheckDigit>[0-9]\\s*)",
        ),
        tracking_url_template="https://tools.usps.com/go/TrackConfirmAction?tLabels=%s",
        serial_number_parser=DefaultSerialNumberParser(
            prepend_if=PrependIf(
                matches_regex=re.compile("^(?!9[1-5]).+"),
                content="91",
            ),
        ),
        checksum_validator=Mod10(odds_multiplier=1, evens_multiplier=3),
    ),
    TrackingNumberDefinition(
        courier=Courier(code="fedex", name="FedEx"),
        product=Product(name="FedEx Express (12)"),
        number_regex=re.compile(
            "\\s*(?P<SerialNumber>([0-9]\\s*){11})(?P<CheckDigit>[0-9]\\s*)",
        ),
        tracking_url_template="https://www.fedex.com/apps/fedextrack/?tracknumbers=%s",
        serial_number_parser=DefaultSerialNumberParser(prepend_if=None),
        checksum_validator=SumProductWithWeightsAndModulo(
            weights=[3, 1, 7, 3, 1, 7, 3, 1, 7, 3, 1],
            first_modulo=11,
            second_modulo=10,
        ),
    ),
    TrackingNumberDefinition(
        courier=Courier(code="fedex", name="FedEx"),
        product=Product(name="FedEx Express (34)"),
        number_regex=re.compile(
            "\\s*1\\s*0\\s*0\\s*[0-9]\\s*[0-9]\\s*([0-9]\\s*){10}(?P<DestinationZip>([0-9]\\s*){5})(?P<SerialNumber>([0-9]\\s*){13})(?P<CheckDigit>[0-9]\\s*)",
        ),
        tracking_url_template="https://www.fedex.com/apps/fedextrack/?tracknumbers=%s",
        serial_number_parser=DefaultSerialNumberParser(prepend_if=None),
        checksum_validator=SumProductWithWeightsAndModulo(
            weights=[1, 7, 3, 1, 7, 3, 1, 7, 3, 1, 7, 3, 1],
            first_modulo=11,
            second_modulo=10,
        ),
    ),
    TrackingNumberDefinition(
        courier=Courier(code="fedex", name="FedEx"),
        product=Product(name="FedEx SmartPost"),
        number_regex=re.compile(
            "\\s*(?P<ApplicationIdentifier>9\\s*2\\s*)?(?P<SerialNumber>(?P<ServiceType>([0-9]\\s*){3})(?P<ShipperId>([0-9]\\s*){9})(?P<PackageId>([0-9]\\s*){7}))(?P<CheckDigit>([0-9]\\s*))",
        ),
        tracking_url_template="https://www.fedex.com/apps/fedextrack/?tracknumbers=%s",
        serial_number_parser=DefaultSerialNumberParser(
            prepend_if=PrependIf(matches_regex=re.compile("^(?!92).+"), content="92"),
        ),
        checksum_validator=Mod10(odds_multiplier=1, evens_multiplier=3),
    ),
    TrackingNumberDefinition(
        courier=Courier(code="fedex", name="FedEx"),
        product=Product(name="FedEx Ground"),
        number_regex=re.compile(
            "\\s*(?P<SerialNumber>([0-9]\\s*){14})(?P<CheckDigit>([0-9]\\s*))",
        ),
        tracking_url_template="https://www.fedex.com/apps/fedextrack/?tracknumbers=%s",
        serial_number_parser=DefaultSerialNumberParser(prepend_if=None),
        checksum_validator=Mod10(odds_multiplier=3, evens_multiplier=1),
    ),
    TrackingNumberDefinition(
        courier=Courier(code="fedex", name="FedEx"),
        product=Product(name="FedEx Ground (SSCC-18)"),
        number_regex=re.compile(
            "\\s*(?P<ShippingContainerType>([0-9]\\s*){2})(?P<SerialNumber>([0-9]\\s*){15})(?P<CheckDigit>[0-9]\\s*)",
        ),
        tracking_url_template="https://www.fedex.com/apps/fedextrack/?tracknumbers=%s",
        serial_number_parser=DefaultSerialNumberParser(prepend_if=None),
        checksum_validator=Mod10(odds_multiplier=1, evens_multiplier=3),
    ),
    TrackingNumberDefinition(
        courier=Courier(code="fedex", name="FedEx"),
        product=Product(name="FedEx Ground 96 (22)"),
        number_regex=re.compile(
            "\\s*(?P<ApplicationIdentifier>9\\s*6\\s*)(?P<SCNC>([0-9]\\s*){2})(?P<ServiceType>([0-9]\\s*){3})(?P<SerialNumber>(?P<ShipperId>([0-9]\\s*){7})(?P<PackageId>([0-9]\\s*){7}))(?P<CheckDigit>[0-9]\\s*)",
        ),
        tracking_url_template="https://www.fedex.com/apps/fedextrack/?tracknumbers=%s",
        serial_number_parser=DefaultSerialNumberParser(prepend_if=None),
        checksum_validator=Mod10(odds_multiplier=3, evens_multiplier=1),
    ),
    TrackingNumberDefinition(
        courier=Courier(code="fedex", name="FedEx"),
        product=Product(name="FedEx Ground GSN"),
        number_regex=re.compile(
            "\\s*(?P<ApplicationIdentifier>9\\s*6\\s*)(?P<SCNC>([0-9]\\s*){2})([0-9]\\s*){5}(?P<GSN>([0-9]\\s*){10})[0-9]\\s*(?P<SerialNumber>([0-9]\\s*){13})(?P<CheckDigit>[0-9]\\s*)",
        ),
        tracking_url_template="https://www.fedex.com/apps/fedextrack/?tracknumbers=%s",
        serial_number_parser=DefaultSerialNumberParser(prepend_if=None),
        checksum_validator=SumProductWithWeightsAndModulo(
            weights=[1, 7, 3, 1, 7, 3, 1, 7, 3, 1, 7, 3, 1],
            first_modulo=11,
            second_modulo=10,
        ),
    ),
    TrackingNumberDefinition(
        courier=Courier(code="ups", name="UPS"),
        product=Product(name="UPS"),
        number_regex=re.compile(
            "\\s*1\\s*Z\\s*(?P<SerialNumber>(?P<ShipperId>(?:[A-Z0-9]\\s*){6,6})(?P<ServiceType>(?:[A-Z0-9]\\s*){2,2})(?P<PackageId>(?:[A-Z0-9]\\s*){7,7}))(?P<CheckDigit>[A-Z0-9]\\s*)",
        ),
        tracking_url_template="https://wwwapps.ups.com/WebTracking/track?track=yes&trackNums=%s",
        serial_number_parser=UPSSerialNumberParser(),
        checksum_validator=Mod10(odds_multiplier=2, evens_multiplier=1),
    ),
    TrackingNumberDefinition(
        courier=Courier(code="s10", name="S10 International Standard"),
        product=Product(name="S10"),
        number_regex=re.compile(
            "\\s*(?P<ServiceType>([A-Z]\\s*){2})(?P<SerialNumber>([0-9]\\s*){8})(?P<CheckDigit>([0-9]\\s*))(?P<CountryCode>([A-Z]\\s*){2})",
        ),
        tracking_url_template=None,
        serial_number_parser=DefaultSerialNumberParser(prepend_if=None),
        checksum_validator=S10(),
    ),
    TrackingNumberDefinition(
        courier=Courier(code="ontrac", name="OnTrac"),
        product=Product(name="OnTrac"),
        number_regex=re.compile(
            "\\s*C\\s*(?P<SerialNumber>([0-9]\\s*){13})(?P<CheckDigit>[0-9]\\s*)",
        ),
        tracking_url_template="http://www.ontrac.com/trackingres.asp?tracking_number=%s",
        serial_number_parser=DefaultSerialNumberParser(
            prepend_if=PrependIf(matches_regex=re.compile("^(?!4).+$"), content="4"),
        ),
        checksum_validator=Mod10(odds_multiplier=2, evens_multiplier=1),
    ),
]
